Object subclass: #Course	instanceVariableNames: 'id name day time isTwoHoursLong'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Course methodsFor: 'setter' stamp: 'koko 4/22/2015 20:03'!day:anInteger(anInteger isKindOf: Integer) ifFalse:[self error: 'invalid input value'].((anInteger >=1)and:[anInteger<=5] ) ifFalse:[self error: 'invalid input value'].
day:=anInteger.! !!Course methodsFor: 'setter' stamp: 'koko 4/22/2015 20:04'!id: aString
(aString isKindOf: String) ifFalse:[self error: 'invalid input value'].(aString isAllDigits ) ifFalse:[self error: 'invalid input value'].
	id:=aString.! !!Course methodsFor: 'setter' stamp: 'koko 4/22/2015 20:04'!isTwoHoursLong:aBoolean(aBoolean isKindOf: Boolean) ifFalse:[self error: 'invalid input value'].
	isTwoHoursLong:=aBoolean.! !!Course methodsFor: 'setter' stamp: 'koko 4/22/2015 20:05'!name:aString(aString isKindOf: String) ifFalse:[self error: 'invalid input value'].
	name:=aString.! !!Course methodsFor: 'setter' stamp: 'koko 4/22/2015 20:05'!time:anInteger(anInteger isKindOf: Integer) ifFalse:[self error: 'invalid input value'].((anInteger >=8)and:[anInteger<=20] ) ifFalse:[self error: 'invalid input value'].
	time:=anInteger.! !!Course methodsFor: 'initialize-release' stamp: 'koko 4/22/2015 20:04'!initialize
	id := String new.	id:='0'.
	name:=''.	.
 	day:=1.	 	time:=8.
	isTwoHoursLong:=false.! !!Course methodsFor: 'getter' stamp: 'koko 4/22/2015 20:03'!day
	^day.! !!Course methodsFor: 'getter' stamp: 'koko 4/22/2015 20:04'!id

	^id.! !!Course methodsFor: 'getter' stamp: 'koko 4/22/2015 20:04'!isTwoHoursLong^isTwoHoursLong.! !!Course methodsFor: 'getter' stamp: 'koko 4/22/2015 20:05'!name
	^name.! !!Course methodsFor: 'getter' stamp: 'koko 4/22/2015 20:05'!time
	^time.! !!Course methodsFor: 'comparing' stamp: 'koko 4/22/2015 20:03'!= arg|x y|((arg = nil) or:[self = nil])ifTrue:[^false].x:= String new.y:=String new.x:=arg id.y:=self id.^(x = y).! !!Course methodsFor: 'comparing' stamp: 'koko 4/22/2015 20:04'!hash	^((self id) hash)! !!Course methodsFor: 'as yet unclassified' stamp: 'koko 4/22/2015 20:02'!colidsWith: aCourse	"returns true if courses clides"(aCourse day = self day) ifFalse:[^false].(aCourse time = self time) ifTrue:[^true].((self time = ((aCourse time)+1)) and:[aCourse isTwoHoursLong ]) ifTrue:[^true]. ((aCourse time = ((self time)+1)) and:[self isTwoHoursLong ]) ifTrue:[^true]. ^false.! !Object subclass: #WeeklySchedule	instanceVariableNames: 'courses'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!WeeklySchedule methodsFor: 'initialize-release' stamp: 'koko 4/22/2015 20:06'!initialize
	courses:=Set new.! !!WeeklySchedule methodsFor: 'adding' stamp: 'koko 4/22/2015 20:05'!addCourse:aCourse
|temp|temp:= Course new.temp := aCourse deepCopy.courses do:[:each| ((temp id = each id) or:[temp colidsWith: each]) ifTrue:[self error: 'cannot add course']].
	courses add:temp.! !!WeeklySchedule methodsFor: 'adding' stamp: 'koko 4/22/2015 20:07'!removeCourse:aString|temp|temp:=Course new.temp id:aString.courses do:[:course|(temp=course) ifTrue:[courses remove:course ifAbsent:[]]].! !!WeeklySchedule methodsFor: 'comparing' stamp: 'koko 4/22/2015 20:06'!compareTo: aSchedule
	|block set x ret|set:=Set new.block:= aSchedule filterCourses:[:dummy|true].x:=block value.[x~=nil]whileTrue:[set add: x.x:=block value].ret := (set=courses).^ret.! !!WeeklySchedule methodsFor: 'others' stamp: 'koko 4/22/2015 20:06'!courses	^courses.! !!WeeklySchedule methodsFor: 'others' stamp: 'koko 4/22/2015 20:06'!coursesOnDate: aDate
|ret|ret:= self filterCourses: [:course| (course day = aDate weekdayIndex)].^ret.! !!WeeklySchedule methodsFor: 'others' stamp: 'koko 4/22/2015 20:06'!filterCourses:aBlock
|ret stack|ret:= OrderedCollection  new.courses do:[:each|(aBlock value:each) ifTrue:[ret addFirst: (each deepCopy)]].ret sort:[:first :second | first day > second day or: [(first day = second day) and: [(first time) > (second time)]]].stack := Stack new.ret do:[:each2 |stack push:each2].^[(stack isEmpty) ifTrue:[nil] ifFalse:[stack pop]]! !!WeeklySchedule methodsFor: 'others' stamp: 'koko 4/22/2015 20:07'!totalHours
	|ret|ret:=0.courses do:[:course|(course isTwoHoursLong ) ifTrue:[ret:= (ret+2)]ifFalse: [ret:=(ret+1)]].^ret.! !