TestCase subclass: #PluggableMenuItemSpecTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Tests'!!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/25/2013 09:54'!testBeCheckableMakesItemCheckable	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	itemSpec beCheckable.	self assert: itemSpec isCheckable description: 'Item not checkable'.! !!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/18/2013 17:36'!testByDefaultNotCheckable	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	self deny: itemSpec isCheckable.! !!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/25/2013 09:56'!testNoMarkerMakesItemChecked	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	itemSpec label: '<no>no'.	itemSpec analyzeLabel.	self assert: itemSpec isCheckable description: 'item not checkable'.	self deny: itemSpec checked description: 'item checked'.! !!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/25/2013 09:56'!testOffMarkerMakesItemChecked	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	itemSpec label: '<off>off'.	itemSpec analyzeLabel.	self assert: itemSpec isCheckable description: 'item not checkable'.	self deny: itemSpec checked description: 'item checked'.! !!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/19/2013 08:33'!testOnMarkerMakesItemChecked	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	itemSpec label: '<on>on'.	itemSpec analyzeLabel.	self assert: itemSpec isCheckable description: 'item not checkable'.	self assert: itemSpec isCheckable description: 'item not checked'.! !!PluggableMenuItemSpecTests methodsFor: 'as yet unclassified' stamp: 'fbs 6/19/2013 08:35'!testYesMarkerMakesItemChecked	| itemSpec |	itemSpec := PluggableMenuItemSpec new.	itemSpec label: '<yes>on'.	itemSpec analyzeLabel.	self assert: itemSpec isCheckable description: 'item not checkable'.	self assert: itemSpec isCheckable description: 'item not checked'.! !TestCase subclass: #ToolBuilderTests	instanceVariableNames: 'builder widget queries'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Tests'!!ToolBuilderTests commentStamp: 'ar 2/11/2005 15:01' prior: 0!Some tests to make sure ToolBuilder does what it says.!!ToolBuilderTests methodsFor: 'support' stamp: 'cwp 7/14/2006 10:59'!acceptWidgetText	"accept text in widget"	^ self subclassResponsibility! !!ToolBuilderTests methodsFor: 'support' stamp: 'cwp 7/14/2006 11:27'!buttonWidgetEnabled	"Answer whether the current widget (a button) is currently enabled"		^ widget getModelState! !!ToolBuilderTests methodsFor: 'support' stamp: 'cwp 7/14/2006 11:00'!changeListWidget	"Change the list widget's selection index"	self subclassResponsibility! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 12/15/2009 15:08'!expectedButtonSideEffects	"side effect queries we expect to see on buttons"	^#()! !!ToolBuilderTests methodsFor: 'support' stamp: 'cwp 7/14/2006 11:00'!fireButtonWidget	"Fire the widget, e.g., perform what is needed for the guy to trigger its action"	self subclassResponsibility! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 6/21/2005 11:00'!returnFalse	^false! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 6/21/2005 10:57'!returnTrue	^true! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 2/11/2005 14:46'!setUp	queries := IdentitySet new.! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 2/10/2005 21:04'!shutDown	self myDependents: nil! !!ToolBuilderTests methodsFor: 'support' stamp: 'ar 2/12/2005 02:54'!waitTick	^nil! !!ToolBuilderTests methodsFor: 'support' stamp: 'cwp 7/14/2006 11:00'!widgetColor	"Answer color from widget"	self subclassResponsibility	"NOTE: You can bail out if you don't know how to get the color from the widget:		^self getColor	will work."! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 16:56'!fireButton	queries add: #fireButton.! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:53'!getEnabled	queries add: #getEnabled.	^true! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:54'!getLabel	queries add: #getLabel.	^'TestLabel'! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:53'!getState	queries add: #getState.	^true! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/10/2005 21:02'!makeButton	| spec |	spec := self makeButtonSpec.	widget := builder build: spec.	^widget! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 7/14/2005 22:14'!makeButtonSpec	| spec |	spec := builder pluggableButtonSpec new.	spec name: #button.	spec model: self.	spec label: #getLabel.	spec color: #getColor.	spec state: #getState.	spec enabled: #getEnabled.	^spec! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 16:54'!testButtonFiresBlock	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec action: [self fireButton].	widget := builder build: spec.	queries := IdentitySet new.	self fireButtonWidget.	self assert: (queries includes: #fireButton).! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 16:53'!testButtonFiresMessage	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec action: (MessageSend receiver: self selector: #fireButton arguments: #()).	widget := builder build: spec.	queries := IdentitySet new.	self fireButtonWidget.	self assert: (queries includes: #fireButton).! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 16:53'!testButtonFiresSymbol	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec action: #fireButton.	widget := builder build: spec.	queries := IdentitySet new.	self fireButtonWidget.	self assert: (queries includes: #fireButton).! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'cwp 7/14/2006 11:15'!testButtonInitiallyDisabled	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec label: #getLabel.	spec color: #getColor.	spec state: #getState.	spec enabled: #returnFalse.	widget := builder build: spec.	self deny: (self buttonWidgetEnabled)! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 6/21/2005 10:57'!testButtonInitiallyDisabledSelector	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec label: #getLabel.	spec color: #getColor.	spec state: #getState.	spec enabled: #returnFalse.	widget := builder build: spec.	self deny: (self buttonWidgetEnabled)! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'cwp 7/14/2006 11:18'!testButtonInitiallyEnabled	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec label: #getLabel.	spec color: #getColor.	spec state: #getState.	spec enabled: #returnTrue.	widget := builder build: spec.	self assert: (self buttonWidgetEnabled)! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 6/21/2005 10:57'!testButtonInitiallyEnabledSelector	| spec |	spec := builder pluggableButtonSpec new.	spec model: self.	spec label: #getLabel.	spec color: #getColor.	spec state: #getState.	spec enabled: #returnTrue.	widget := builder build: spec.	self assert: (self buttonWidgetEnabled)! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 7/14/2005 22:22'!testButtonWidgetID	self makeButton.	self assert: (builder widgetAt: #button) == widget.! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 21:42'!testGetButtonColor	self makeButton.	queries := IdentitySet new.	self changed: #getColor.	self assert: (queries includes: #getColor).	self assert: self widgetColor = self getColor.! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:57'!testGetButtonEnabled	self makeButton.	queries := IdentitySet new.	self changed: #getEnabled.	self assert: (queries includes: #getEnabled).! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:57'!testGetButtonLabel	self makeButton.	queries := IdentitySet new.	self changed: #getLabel.	self assert: (queries includes: #getLabel).! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 12/15/2009 15:07'!testGetButtonSideEffects	self makeButton.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self expectedButtonSideEffects do:[:sym|		self assert: (queries includes: sym). 		queries remove: sym.	].	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-button' stamp: 'ar 2/11/2005 14:57'!testGetButtonState	self makeButton.	queries := IdentitySet new.	self changed: #getState.	self assert: (queries includes: #getState).! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!makeInputField	| spec |	spec := self makeInputFieldSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 7/14/2005 22:19'!makeInputFieldSpec	| spec |	spec := builder pluggableInputFieldSpec new.	spec name: #input.	spec model: self.	spec getText: #getText.	spec selection: #getTextSelection.	spec color: #getColor.	"<-- the following cannot be tested very well -->"	spec setText: #setText:.	spec menu: #getMenu:.	^spec! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!testGetInputFieldColor	self makeInputField.	queries := IdentitySet new.	self changed: #getColor.	self assert: (queries includes: #getColor).	self assert: self widgetColor = self getColor.! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!testGetInputFieldSelection	self makeInputField.	queries := IdentitySet new.	self changed: #getTextSelection.	self assert: (queries includes: #getTextSelection).! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!testGetInputFieldSideEffectFree	self makeInputField.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!testGetInputFieldText	self makeInputField.	queries := IdentitySet new.	self changed: #getText.	self assert: (queries includes: #getText).! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 7/14/2005 22:19'!testInputWidgetID	self makeInputField.	self assert: (builder widgetAt: #input) == widget.! !!ToolBuilderTests methodsFor: 'tests-input' stamp: 'ar 2/12/2005 02:35'!testSetInputField	self makeInputField.	queries := IdentitySet new.	self acceptWidgetText.	self assert: (queries includes: #setText).! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:54'!getList	queries add: #getList.	^(1 to: 100) collect:[:i| i printString].! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:54'!getListIndex	queries add: #getListIndex.	^13! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:54'!getListSelection	queries add: #getListSelection.	^'55'! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/12/2005 02:44'!getMenu: aMenu	queries add: #getMenu.	^aMenu! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/12/2005 02:45'!keyPress: key	queries add: #keyPress.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/10/2005 22:35'!makeItemList	| spec |	spec := self makeItemListSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 7/14/2005 22:17'!makeItemListSpec	| spec |	spec := builder pluggableListSpec new.	spec name: #list.	spec model: self.	spec list: #getList.	spec getSelected: #getListSelection.	"<-- the following cannot be tested very well -->"	spec setSelected: #setListSelection:.	spec menu: #getMenu:.	spec keyPress: #keyPress:.	^spec! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/10/2005 21:03'!makeList	| spec |	spec := self makeListSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 7/14/2005 22:18'!makeListSpec	| spec |	spec := builder pluggableListSpec new.	spec name: #list.	spec model: self.	spec list: #getList.	spec getIndex: #getListIndex.	"<-- the following cannot be tested very well -->"	spec setIndex: #setListIndex:.	spec menu: #getMenu:.	spec keyPress: #keyPress:.	^spec! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 19:18'!setListIndex: index	queries add: #setListIndex.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:54'!setListSelection: newIndex	queries add: #setListSelection.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:56'!testGetItemListSideEffectFree	self makeItemList.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:56'!testGetList	self makeList.	queries := IdentitySet new.	self changed: #getList.	self assert: (queries includes: #getList).! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:57'!testGetListIndex	self makeList.	queries := IdentitySet new.	self changed: #getListIndex.	self assert: (queries includes: #getListIndex).! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:57'!testGetListSelection	self makeItemList.	queries := IdentitySet new.	self changed: #getListSelection.	self assert: (queries includes: #getListSelection).! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 14:57'!testGetListSideEffectFree	self makeList.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 7/14/2005 22:18'!testItemListWidgetID	self makeItemList.	self assert: (builder widgetAt: #list) == widget.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 7/14/2005 22:18'!testListWidgetID	self makeList.	self assert: (builder widgetAt: #list) == widget.! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 19:19'!testSetListIndex	self makeList.	queries := IdentitySet new.	self changeListWidget.	self assert: (queries includes: #setListIndex).! !!ToolBuilderTests methodsFor: 'tests-lists' stamp: 'ar 2/11/2005 19:19'!testSetListSelection	self makeItemList.	queries := IdentitySet new.	self changeListWidget.	self assert: (queries includes: #setListSelection).! !!ToolBuilderTests methodsFor: 'tests-menus' stamp: 'cwp 6/9/2005 08:25'!assertItemFiresWith: aBlock	| spec |	spec := builder pluggableMenuSpec new.	spec model: self.	aBlock value: spec.	widget := builder build: spec.	queries := IdentitySet new.	self fireMenuItemWidget.	self assert: (queries includes: #fireMenuAction)! !!ToolBuilderTests methodsFor: 'tests-menus' stamp: 'cwp 6/8/2005 23:25'!fireMenuAction	queries add: #fireMenuAction! !!ToolBuilderTests methodsFor: 'tests-menus' stamp: 'cwp 6/9/2005 00:08'!fireMenuItemWidget	self subclassResponsibility! !!ToolBuilderTests methodsFor: 'tests-menus' stamp: 'cwp 6/9/2005 08:28'!testAddTargetSelectorArgumentList	self assertItemFiresWith: 		[:spec | spec				add: 'Menu Item' 				target: self				selector: #fireMenuAction				argumentList: #()]! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 2/11/2005 14:54'!getChildren	queries add: #getChildren.	^#()! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 2/10/2005 21:03'!makePanel	| spec |	spec := self makePanelSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 7/14/2005 22:15'!makePanelSpec	| spec |	spec := builder pluggablePanelSpec new.	spec name: #panel.	spec model: self.	spec children: #getChildren.	^spec! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 2/11/2005 14:56'!testGetPanelChildren	self makePanel.	queries := IdentitySet new.	self changed: #getChildren.	self assert: (queries includes: #getChildren).! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 2/11/2005 14:56'!testGetPanelSideEffectFree	self makePanel.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-panel' stamp: 'ar 7/14/2005 22:22'!testPanelWidgetID	self makePanel.	self assert: (builder widgetAt: #panel) == widget.! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 21:41'!getColor	queries add: #getColor.	^Color tan! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 14:53'!getText	queries add: #getText.	^Text new! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 14:54'!getTextSelection	queries add: #getTextSelection.	^(1 to: 0)! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/10/2005 21:03'!makeText	| spec |	spec := self makeTextSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 7/14/2005 22:17'!makeTextSpec	| spec |	spec := builder pluggableTextSpec new.	spec name: #text.	spec model: self.	spec getText: #getText.	spec selection: #getTextSelection.	spec color: #getColor.	"<-- the following cannot be tested very well -->"	spec setText: #setText:.	spec menu: #getMenu:.	^spec! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 19:29'!setText: newText	queries add: #setText.	^false! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 21:41'!testGetText	self makeText.	queries := IdentitySet new.	self changed: #getText.	self assert: (queries includes: #getText).! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 21:41'!testGetTextColor	self makeText.	queries := IdentitySet new.	self changed: #getColor.	self assert: (queries includes: #getColor).	self assert: self widgetColor = self getColor.! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 14:56'!testGetTextSelection	self makeText.	queries := IdentitySet new.	self changed: #getTextSelection.	self assert: (queries includes: #getTextSelection).! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 14:57'!testGetTextSideEffectFree	self makeText.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 2/11/2005 19:23'!testSetText	self makeText.	queries := IdentitySet new.	self acceptWidgetText.	self assert: (queries includes: #setText).! !!ToolBuilderTests methodsFor: 'tests-text' stamp: 'ar 7/14/2005 22:17'!testTextWidgetID	self makeText.	self assert: (builder widgetAt: #text) == widget! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:43'!getChildrenOf: item	queries add: #getChildrenOf.	^(1 to: 9) asArray! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:44'!getHelpOf: item	^'help'! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:43'!getIconOf: item	queries add: #getIconOf.	^nil! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:47'!getLabelOf: item	queries add: #getLabelOf.	^item asString! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:41'!getRoots	queries add: #getRoots.	^(1 to: 9) asArray! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 03:38'!getTreeSelectionPath	queries add: #getTreeSelectionPath.	^{2. 4. 3}! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:43'!hasChildren: item	queries add: #hasChildren.	^true! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 7/14/2005 22:15'!makeTree	| spec |	spec := self makeTreeSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 7/14/2005 22:15'!makeTreeSpec	| spec |	spec := builder pluggableTreeSpec new.	spec name: #tree.	spec model: self.	spec roots: #getRoots.	"<-- the following cannot be tested very well -->"	spec getSelectedPath: #getTreeSelectionPath.	spec getChildren: #getChildrenOf:.	spec hasChildren: #hasChildren:.	spec label: #getLabelOf:.	spec icon: #getIconOf:.	spec help: #getHelpOf:.	spec setSelected: #setTreeSelection:.	spec menu: #getMenu:.	spec keyPress: #keyPress:.	^spec! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:44'!setTreeSelection: node	queries add: #setTreeSelection.! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 03:51'!testTreeExpandPath	"@@@@: REMOVE THIS - it's a hack (changed: #openPath)"	self makeTree.	queries := IdentitySet new.	self changed: {#openPath. '4'. '2'. '3'}.	self waitTick.	self assert: (queries includes: #getChildrenOf).	self assert: (queries includes: #setTreeSelection).	self assert: (queries includes: #getLabelOf).! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 03:51'!testTreeExpandPathFirst	"@@@@: REMOVE THIS - it's a hack (changed: #openPath)"	self makeTree.	queries := IdentitySet new.	self changed: {#openPath. '1'. '2'. '2'}.	self waitTick.	self assert: (queries includes: #getChildrenOf).	self assert: (queries includes: #setTreeSelection).	self assert: (queries includes: #getLabelOf).! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 03:49'!testTreeGetSelectionPath	self makeTree.	queries := IdentitySet new.	self changed: #getTreeSelectionPath.	self waitTick.	self assert: (queries includes: #getTreeSelectionPath).	self assert: (queries includes: #getChildrenOf).	self assert: (queries includes: #setTreeSelection).! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 2/12/2005 02:48'!testTreeRoots	self makeTree.	queries := IdentitySet new.	self changed: #getRoots.	self assert: (queries includes: #getRoots).! !!ToolBuilderTests methodsFor: 'tests-trees' stamp: 'ar 7/14/2005 22:22'!testTreeWidgetID	self makeTree.	self assert: (builder widgetAt: #tree) == widget.! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 2/10/2005 21:04'!makeWindow	| spec |	spec := self makeWindowSpec.	widget := builder build: spec.! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 9/17/2005 21:02'!makeWindowSpec	| spec |	spec := builder pluggableWindowSpec new.	spec name: #window.	spec model: self.	spec children: #getChildren.	spec label: #getLabel.	spec closeAction: #noteWindowClosed.	^spec! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 9/17/2005 21:02'!noteWindowClosed	queries add: #noteWindowClosed.! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 9/17/2005 21:04'!openWindow	| spec |	spec := self makeWindowSpec.	widget := builder open: spec.! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 2/11/2005 14:56'!testGetWindowChildren	self makeWindow.	queries := IdentitySet new.	self changed: #getChildren.	self assert: (queries includes: #getChildren).! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 2/11/2005 14:56'!testGetWindowLabel	self makeWindow.	queries := IdentitySet new.	self changed: #getLabel.	self assert: (queries includes: #getLabel).! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 2/11/2005 14:57'!testGetWindowSideEffectFree	self makeWindow.	queries := IdentitySet new.	self changed: #testSignalWithNoDiscernableEffect.	self assert: queries isEmpty.! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 9/17/2005 21:05'!testWindowCloseAction	self openWindow.	builder close: widget.	self assert: (queries includes: #noteWindowClosed).! !!ToolBuilderTests methodsFor: 'tests-window' stamp: 'ar 7/14/2005 22:20'!testWindowID	self makeWindow.	self assert: (builder widgetAt: #window) == widget.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ToolBuilderTests class	instanceVariableNames: ''!!ToolBuilderTests class methodsFor: 'testing' stamp: 'ar 2/11/2005 14:36'!isAbstract	^self == ToolBuilderTests! !